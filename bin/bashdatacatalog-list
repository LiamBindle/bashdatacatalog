#!/usr/bin/env bash
set -u
set -e
if [ ! -z ${DEBUG+x} ]; then
    set -x
fi

usage_message=$(cat << EOF
bashdatacatalog-list is a command-line tool that generates file lists to help synchronize local
copies of data collections with remote (upstream) data collections.

See https://github.com/LiamBindle/bashdatacatalog/wiki for more documentation.

Usage:

  bashdatacatalog-list -h                   Prints this help message and exits.

  bashdatacatalog-list SCOPE... [FILTER...] [MODIFIER] [FORMAT] CATALOG_FILE...
  bashdatacatalog-list SCOPE... [FILTER...] [MODIFIER] [FORMAT] COLLECTION...

Scopes:         (REQUIRED) Choose one or more flags to define the list's scope. 
                The scope of the list will include:

  -a            all files that are tracked (equivalent to -st)
  -s            static files
  -t            temporal files
  -n            new files

Filters:        (optional) Choose one or more flags to filter out certain files. 
                The list will only consider:

  -p "PATTERN"  files matching "PATTERN" (regex)
  -r "RANGE"    files needed for date range "RANGE", 
                 where "RANGE" is "SINCE_DATE," or "START_DATE,END_DATE",
                 dates should use YYYY-MM-DD format,
                 e.g., -r "2015-01-01,2020-12-31" or -r "2015-01-01,"

Modifiers:      (optional) Choose one flags to list certain files.
                The output list will be:

  -m            missing files (files that are NOT present locally)
  -e            existing files (files that ARE present locally)
  -w            wrong files (files whose checksum does NOT match the remote),
                 note that this option may take a significant amount of time
  -u            unnecessary files (files that are not needed),
                 typically used with the -r "RANGE" flag

Formats:        (optional) Choose an output format.
                Files in the list are formatted as:

  -f rel        relative paths
  -f abs        absolute paths
  -f url        URLs of the remote files, useful for download data over HTTP
                 compatible with wget --input-file
  -f rsync      output list is compatible with the rsync --files-from argument,
                 useful for downloading data over SSH with rsync
  -f globus=S,D output list is compatible with globus --batch,
                 S is the source endpoint, D is the destination endpoint,
                 useful for downloading data with Globus
  -f xargs-rm   output can be piped into xargs rm to delete the files in the list,
                 typically used with -u to remove unnecessary files
  -f xargs-curl output can be piped into xargs curl to download the files in the list  
EOF
)

function generate_scoped_list() {
    working_list=$1
    all_assets=$(mktemp)
    temporal_assets=$(mktemp)
    static_assets=$(mktemp)
    temp_file=$(mktemp)

    [ -f .assets.md5 ] && awk -F ' +' '{print $2}' .assets.md5 | sed 's/^\*//g' > ${all_assets}
    [ -f .temporal_assets.sed ] && sed -n -f .temporal_assets.sed ${all_assets} | awk -F ' +' '{print $2}' > ${temporal_assets}
    sort -o ${all_assets} ${all_assets}
    sort -o ${temporal_assets} ${temporal_assets}
    comm -23 ${all_assets} ${temporal_assets} > ${static_assets}

    # Stage 1: Generate work list
    if [ "${BDC_LIST_STATIC}" = true ]; then
        cat ${static_assets} >> ${working_list}
    fi

    if [ "${BDC_LIST_TEMPORAL}" = true ]; then
        cat ${temporal_assets} >> ${working_list}
    fi

    if [ "${BDC_LIST_NEW}" = true ]; then
        find -L . -name .asset_patches -prune -o -type f \( ! -name '\.*' \) -print | sort > ${temp_file}
        sort -o ${temp_file} ${temp_file}
        comm -23 ${temp_file} ${all_assets} >> ${working_list}
    fi
    
    if [ "${BDC_LIST_CHANGED}" = true ] && [ -f .assets.md5 ]; then
        find -L . -name .asset_patches -prune -o -type f \( ! -name '\.*' \) -newer .assets.md5 -print | sort >> ${working_list}
    fi

    # Sort working_list
    sort -o ${working_list} ${working_list}

    rm ${all_assets} ${temporal_assets} ${static_assets} ${temp_file}
}

function trim_scoped_list() {
    working_list=$1
    temp_file=$(mktemp)
    trim_list=$(mktemp)
    
    if [ -f .ignore.grep ]; then
        grep -v -f .ignore.grep ${working_list} > ${temp_file}
        cp ${temp_file} ${working_list}
    fi

    grep "${BDC_LIST_PATTERN}" ${working_list} > ${temp_file} || :
    cp ${temp_file} ${working_list}

    if [ -f .temporal_assets.sed ]; then

        AWK_CMP_LT='''
        { if(length($1) > length(threshold)) { cmplen=length(threshold) } else { cmplen=length($1) }; if(substr($1,0,cmplen) < substr(threshold,0,cmplen)) print $2 }
        '''
        AWK_CMP_GT='''
        { if(length($1) > length(threshold)) { cmplen=length(threshold) } else { cmplen=length($1) }; if(substr($1,0,cmplen) > substr(threshold,0,cmplen)) print $2 }
        '''

        RANGE_START=$(echo ${BDC_LIST_RANGE} | cut -d, -f1)
        RANGE_END=$(echo ${BDC_LIST_RANGE} | cut -d, -f2)
        
        sed -n -f .temporal_assets.sed ${working_list} > ${temp_file}
        if [ ! -z "${RANGE_START}" ]; then
            awk -F ' +' -v threshold=${RANGE_START} "$AWK_CMP_LT" ${temp_file} >> ${trim_list}
        fi
        if [ ! -z "${RANGE_END}" ]; then
            awk -F ' +' -v threshold=${RANGE_END} "$AWK_CMP_GT" ${temp_file} >> ${trim_list}
        fi
        
        grep -v -F -f ${trim_list} ${working_list} > ${temp_file}
        cp ${temp_file} ${working_list}
    fi

    rm ${temp_file} ${trim_list}
}

function modify_list() {
    working_list=$1
    file_list=$(mktemp)
    temp_file=$(mktemp)
    
    if [ ! -z "${BDC_LIST_WHAT}" ]; then
        find -L . -name .asset_patches -prune -o -type f \( ! -name '\.*' \) -print | sort > ${file_list}
        sort -o ${file_list} ${file_list}
    fi
    
    sort -o ${working_list} ${working_list}

    case "${BDC_LIST_WHAT}" in
        missing)
            comm -23 ${working_list} ${file_list} > ${temp_file}
            cp ${temp_file} ${working_list}
            ;;
        existing)
            comm -12 ${working_list} ${file_list} > ${temp_file}
            cp ${temp_file} ${working_list}
            ;;
        wrong)
            printf "" > ${temp_file}
            while read FILE_PATH; do
                grep -F "${FILE_PATH}" .assets.md5 | md5sum -c --status --ignore-missing || echo "${FILE_PATH}" >> ${temp_file}
            done < ${working_list}
            cp ${temp_file} ${working_list}
            ;;
        unnecessary)
            comm -13 ${working_list} ${file_list} > ${temp_file}
            cp ${temp_file} ${working_list}
            ;;
    esac

    # Sort and remove duplicates
    sort ${working_list} | uniq -u > ${temp_file}
    cp ${temp_file} ${working_list}

    rm ${temp_file} ${file_list}
}

function format_list() {
    working_list=$1
    output_list=$(mktemp) 

    case "${BDC_LIST_FORMAT}" in
        "rel")
            sed "s#^\./#./$BDC_COLLECTION_PREFIX#g" ${working_list} > ${output_list}
            ;;
        "abs")
            sed "s#^\./#$PWD/#g" ${working_list} > ${output_list}
            ;;
        "url")
            sed "s#^\./#$BDC_COLLECTION_URL#g" ${working_list} > ${output_list}
            ;;
        "rsync")
            sed "s#^\./#./$BDC_COLLECTION_PREFIX#g" ${working_list} > ${output_list}
            ;;
        "xargs-rm")
            sed "s#^\./#./$BDC_COLLECTION_PREFIX#g" ${working_list} > ${output_list}
            ;;
        "xargs-curl")
            sed "s#^\./\(.*\)#$BDC_CURL_OPTIONS --url $BDC_COLLECTION_URL\1 -o ./$BDC_COLLECTION_PREFIX\1#g" ${working_list} > ${output_list}
            ;;
        "globus="*","*)
            GLOBUS_SRC=$(echo "${BDC_LIST_FORMAT}" | sed 's#globus=\([^,]*\),\(.*\)#\1#g')
            GLOBUS_DST=$(echo "${BDC_LIST_FORMAT}" | sed 's#globus=\([^,]*\),\(.*\)#\2#g')
            sed "s#^\./\(.*\)#$GLOBUS_SRC/$BDC_COLLECTION_PREFIX\1  $GLOBUS_DST/$BDC_COLLECTION_PREFIX\1#g" ${working_list} > ${output_list}
            ;;
    esac
    
    cp ${output_list} ${working_list}
    
    rm ${output_list}
}

function list_collection() {
    BDC_LIST_STATIC=${BDC_LIST_STATIC:=false}
    BDC_LIST_TEMPORAL=${BDC_LIST_TEMPORAL:=false}
    BDC_LIST_NEW=${BDC_LIST_NEW:=false}
    BDC_LIST_CHANGED=${BDC_LIST_CHANGED:=false}
    BDC_LIST_WHAT=${BDC_LIST_WHAT:=""}
    BDC_LIST_PATTERN=${BDC_LIST_PATTERN:=".*"}
    BDC_LIST_RANGE=${BDC_LIST_RANGE:=","}
    BDC_LIST_FORMAT=${BDC_LIST_FORMAT:="rel"}
    BDC_COLLECTION_PREFIX=${BDC_COLLECTION_PREFIX:=""}
    if [ "${BDC_COLLECTION_PREFIX}" = "./" ]; then
        BDC_COLLECTION_PREFIX=""
    fi

    curl_write_out='(status %{http_code})  %{url_effective} -> %{filename_effective}  [%{size_download} bytes]\\n'
    BDC_CURL_OPTIONS=${BDC_CURL_OPTIONS:="--write-out '${curl_write_out}' --fail --silent --insecure --netrc-optional --location --globoff --create-dirs"}
    
    working_list=$(mktemp)

    generate_scoped_list ${working_list}
    trim_scoped_list ${working_list}
    modify_list ${working_list}
    format_list ${working_list}

    cat ${working_list}

    rm ${working_list}
}

while getopts "anstr:p:mwuf:ech" FLAG; do
    case "${FLAG}" in
        a)
            BDC_LIST_STATIC=true
            BDC_LIST_TEMPORAL=true
            ;;
        n)
            BDC_LIST_NEW=true
            ;;
        s)
            BDC_LIST_STATIC=true
            ;;
        t)
            BDC_LIST_TEMPORAL=true
            ;;
        r)
            BDC_LIST_RANGE=${OPTARG}
            VALID_REGEX='^[0-9][0-9][0-9][0-9]\(-[0-1][0-9]\)\?\(-[0-3][0-9]\)\?,\([0-9][0-9][0-9][0-9]\(-[0-1][0-9]\)\?\(-[0-3][0-9]\)\?\)\?$'
            echo ${BDC_LIST_RANGE} | grep "${VALID_REGEX}" &> /dev/null || { echo "error: invalid date range \"${BDC_LIST_RANGE}\"" 1>&2; exit 1; }
            ;;
        p)
            BDC_LIST_PATTERN=${OPTARG}
            ;;
        m)
            BDC_LIST_WHAT="missing"
            ;;
        e)
            BDC_LIST_WHAT="existing"
            ;;
        w)
            BDC_LIST_WHAT="wrong"
            ;;
        u)
            BDC_LIST_NEW=true
            BDC_LIST_STATIC=true
            BDC_LIST_TEMPORAL=true
            BDC_LIST_WHAT="unnecessary"
            ;;
        f)
            BDC_LIST_FORMAT=${OPTARG}
            VALID_REGEX='^\(rel\)$\|^\(abs\)$\|^\(url\)$\|^\(rsync\)$\|^\(xargs-rm\)$\|^\(xargs-curl\)$\|^\(globus=[^ ][^ ]*,[^ ][^ ]*\)'
            echo ${BDC_LIST_FORMAT} | grep "${VALID_REGEX}" &> /dev/null || { echo "error: invalid format \"${BDC_LIST_FORMAT}\"" 1>&2; exit 1; }
            ;;
        c)
            # hidden option
            # include "changed" files to list scope (modified date is newer than .assets.md5)
            BDC_LIST_CHANGED=true
            ;;
        h)
            echo "${usage_message}"
            exit 0
            ;;
    esac 
done
if [ $OPTIND -eq 1 ]; then
    echo "error: no flags provided (at least one of following flags is required: -a, -s, -t, -n)" 1>&2
    exit 1
fi
shift $(($OPTIND-1))

source bashdatacatalog-execdir 'list_collection' $@
